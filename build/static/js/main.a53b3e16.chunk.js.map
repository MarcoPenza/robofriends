{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/robots.js","components/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","this","props","name","username","email","className","src","alt","Component","CardList","card","robots","map","robot","key","id","SearchBox","handleChange","bind","event","handleSearch","target","value","type","placeholder","onChange","App","state","search","setState","console","log","filteredRobots","filter","toLowerCase","includes","React","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wQAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uCCASC,G,mLAdD,IAAD,EACyBC,KAAKC,MAA5BC,EADF,EACEA,KAAKC,EADP,EACOA,SAASC,EADhB,EACgBA,MACrB,OACI,yBAAKC,UAAU,QACX,yBAAKC,IAAG,+BAA0BH,GAAYI,IAAI,UAClD,6BACI,4BAAKL,GACL,2BAAIE,S,GARLI,cCgBJC,G,6KAbX,IAAMC,EAAOV,KAAKC,MAAMU,OAAOC,KAAI,SAACC,GAAD,OACjC,kBAAC,EAAD,CACEC,IAAKD,EAAME,GACXA,GAAIF,EAAME,GACVb,KAAMW,EAAMX,KACZE,MAAOS,EAAMT,MACbD,SAAUU,EAAMV,cAGpB,OAAO,yBAAKE,UAAU,YAAYK,O,GAXfF,cCkBRQ,G,wDAlBX,WAAYf,GAAO,IAAD,8BACd,cAAMA,IACDgB,aAAe,EAAKA,aAAaC,KAAlB,gBAFN,E,yDAKLC,GACTnB,KAAKC,MAAMmB,aAAaD,EAAME,OAAOC,S,+BAIzC,OACE,yBAAKjB,UAAU,aACb,2BAAOA,UAAU,kBAAkBkB,KAAK,SAASC,YAAY,eAAeC,SAAUzB,KAAKiB,oB,GAb3ET,cC4DTG,EA/DC,CACd,CACEI,GAAI,EACJb,KAAM,gBACNC,SAAU,OACVC,MAAO,qBAET,CACEW,GAAI,EACJb,KAAM,eACNC,SAAU,YACVC,MAAO,qBAET,CACEW,GAAI,EACJb,KAAM,mBACNC,SAAU,WACVC,MAAO,sBAET,CACEW,GAAI,EACJb,KAAM,mBACNC,SAAU,WACVC,MAAO,6BAET,CACEW,GAAI,EACJb,KAAM,mBACNC,SAAU,SACVC,MAAO,4BAET,CACEW,GAAI,EACJb,KAAM,uBACNC,SAAU,mBACVC,MAAO,2BAET,CACEW,GAAI,EACJb,KAAM,kBACNC,SAAU,eACVC,MAAO,0BAET,CACEW,GAAI,EACJb,KAAM,2BACNC,SAAU,gBACVC,MAAO,wBAET,CACEW,GAAI,EACJb,KAAM,kBACNC,SAAU,WACVC,MAAO,2BAET,CACEW,GAAI,GACJb,KAAM,qBACNC,SAAU,iBACVC,MAAO,2BCnBIsB,E,kDAjCb,WAAYzB,GAAQ,IAAD,8BACjB,cAAMA,IAED0B,MAAQ,CACXhB,OAAQA,EACRiB,OAAQ,IAEV,EAAKR,aAAe,EAAKA,aAAaF,KAAlB,gBAPH,E,yDAUNI,GACTtB,KAAK6B,SAAS,CACVD,OAAQN,IAIdQ,QAAQC,IAAI,SAAUT,K,+BAGd,IAAD,EACmBtB,KAAK2B,MAAvBhB,EADD,EACCA,OAAOiB,EADR,EACQA,OACTI,EAAkBrB,EAAOsB,QAAO,SAACpB,GAAD,OAAWA,EAAMX,KAAKgC,cAAcC,SAASP,MACnF,OACE,yBAAKvB,UAAU,aACb,wBAAIA,UAAU,gBAAd,eACA,kBAAC,EAAD,CAAWe,aAAcpB,KAAKoB,eAC9B,6BACA,kBAAC,EAAD,CAAUT,OAAQqB,S,GA5BRI,IAAM5B,WCDxB6B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SN0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.a53b3e16.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react';\r\nimport '../styles/Card.css';\r\n\r\nclass Card extends Component {\r\n    render() {\r\n        const {name,username,email} = this.props;\r\n        return (\r\n            <div className=\"Card\">\r\n                <img src={`https://robohash.org/${username}`} alt=\"robot\" />\r\n                <div>\r\n                    <h2>{name}</h2>\r\n                    <p>{email}</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Card;\r\n","import React, { Component } from \"react\";\r\nimport Card from \"./Card\";\r\nimport \"../styles/CardList.css\";\r\n\r\nclass CardList extends Component {\r\n  render() {\r\n    const card = this.props.robots.map((robot) => (\r\n      <Card\r\n        key={robot.id}\r\n        id={robot.id}\r\n        name={robot.name}\r\n        email={robot.email}\r\n        username={robot.username}\r\n      />\r\n    ));\r\n    return <div className=\"CardList\">{card}</div>;\r\n  }\r\n}\r\n\r\nexport default CardList;\r\n","import React, { Component } from \"react\";\r\nimport '../styles/SearchBox.css'\r\n\r\nclass SearchBox extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(event){\r\n        this.props.handleSearch(event.target.value);\r\n    }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"SearchBox\">\r\n        <input className=\"SearchBox-input\" type=\"search\" placeholder=\"Search Robot\" onChange={this.handleChange}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBox;\r\n"," const robots = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz'\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  }\n];\n\nexport default robots;","import React from \"react\";\r\nimport \"../styles/App.css\";\r\nimport CardList from \"./CardList\";\r\nimport SearchBox from \"./SearchBox\";\r\nimport robots from \"./robots\";\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      robots: robots,\r\n      search: \"\",\r\n    };\r\n    this.handleSearch = this.handleSearch.bind(this);\r\n  }\r\n\r\n  handleSearch(value) {\r\n      this.setState({\r\n          search: value\r\n      })\r\n        \r\n\r\n    console.log(\"input:\" ,value);\r\n  }\r\n\r\n  render() {\r\n    const { robots,search } = this.state;\r\n    const filteredRobots =  robots.filter((robot) => robot.name.toLowerCase().includes(search))\r\n    return (\r\n      <div className=\"container\">\r\n        <h1 className=\"header-style\">RoboFriends</h1>\r\n        <SearchBox handleSearch={this.handleSearch} />\r\n        <hr />\r\n        <CardList robots={filteredRobots} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}